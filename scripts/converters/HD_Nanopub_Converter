require 'rdf'
require 'logger'
require 'slop'
require_relative 'rdf_converter'
#require 'rdf-agraph'

# Convert txt file generated by Concept Profile Matching texting mining method.
#
# Input file format:
# concept1_id concept1_external_id concept2_id concept2_external_id match_score p_value {top 10 concepts in JSON}
class HD_Nanopub_Converter < RDF_File_Converter

  def initialize

    super

  end

  def convert_header_row(row)
    # do nothing
  end

  def convert_row(row)
    tokens = row.split

    entrez_id = tokens[0]
    # p_value = sprintf('%.3E', tokens[5]).to_f # round it to 3 significant digit


    if entrez_id == 'null'
      @logger.info("row #{@row_index.to_s} has no entrez gene id. skipped.")
      return
    end

    @row_index += 1

    create_hda_nanopub(entrez_id)

  end


  protected
  def get_options
    options = Slop.parse(:help => true) do
      banner "ruby concept_profile_matching.rb [options]\n"
      on :base_url=, :default => 'http://rdf.biosemantics.org/nanopubs/hd'
    end

    super.merge(options)
  end

  protected
  def create_hda_nanopub(entrez_id)

    # setup nanopub
    nanopub = RDF::Vocabulary.new(@base[@row_index.to_s.rjust(6, '0')])
    assertion = nanopub['#assertion']
    provenance = nanopub['#provenance']
    publication_info = nanopub['#publicationInfo']

    # main graph
    create_main_graph(nanopub, assertion, provenance, publication_info)

    # assertion graph
    association = HDA["association_#{@row_index.to_s.rjust(6, '0')}"]
    #association_p_value = GDA["association_#{@row_index.to_s.rjust(6, '0')}_p_value"]
    save(assertion, [
        [association, RDF.type, SIO['SIO_000983']],
        [association, SIO['refers-to'], RDF::URI.new("http://bio2rdf.org/geneid:#{entrez_id}")],
        [association, SIO['refers-to'], RDF::URI.new("http://ontology.neuinfo.org/NIF/Dysfunction/NIF-Dysfunction.owl#birnlex_12500")],
        [association, RDFS.comment, RDF::Literal.new("some comment", :language => 'en')]
    ])

    save(provenance, [
        [assertion, PROV.wasDerivedFrom, RDF::URI.new('http://rdf.biosemantics.org/vocabularies/text_mining#gene_disease_concept_profiles_1980_2010')],
        [assertion, PROV.wasGeneratedBy, RDF::URI.new('http://rdf.biosemantics.org/vocabularies/text_mining#gene_disease_concept_profiles_matching_1980_2010')]
    ])

    save(publication_info, [
        [nanopub, DC.rights, RDF::URI.new('http://creativecommons.org/licenses/by/3.0/')],
        [nanopub, DC.rightsHolder, RDF::URI.new('http://biosemantics.org')],
        [nanopub, PAV.authoredBy, RDF::URI.new('http://www.researcherid.com/rid/B-6035-2012')],
        [nanopub, PAV.authoredBy, RDF::URI.new('http://www.researcherid.com/rid/B-5927-2012')],
        [nanopub, PAV.createdBy, RDF::URI.new('http://www.researcherid.com/rid/B-5852-2012')],
        [nanopub, DC.created, RDF::Literal.new(Time.now.utc, :datatype => XSD.dateTime)]
    ])
  end
end


# do the work
HD_Nanopub_Converter.new.convert